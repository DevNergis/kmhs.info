---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="시간표 조회" description="학년과 반을 선택하여 시간표를 조회하세요">
  <main class="mx-auto p-4 w-full max-w-4xl text-black dark:text-white text-lg leading-relaxed">
    <h1 class="text-4xl font-bold text-center mb-4">시간표 조회</h1>
    <div class="mb-4">
      <label for="grade" class="block mb-2">학년:</label>
      <input type="number" id="grade" class="border p-2 w-full" min="1" max="3" />
    </div>
    <div class="mb-4">
      <label for="classNum" class="block mb-2">반:</label>
      <input type="number" id="classNum" class="border p-2 w-full" min="1" max="10" />
    </div>
    <button id="fetch-timetable" class="bg-blue-500 text-white p-2 rounded">시간표 조회</button>
    <div id="timetable-container" class="mt-4 p-4 bg-gray-100 dark:bg-gray-800 rounded">
      <table id="timetable" class="w-full border-collapse">
        <thead>
        <tr>
          <th class="border p-2">요일</th>
          <th class="border p-2">시간표</th>
        </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </main>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const gradeElement = document.getElementById('grade');
      const classNumElement = document.getElementById('classNum');
      const fetchButtonElement = document.getElementById('fetch-timetable');
      let grade = 0;
      let classNum = 0;

      function updateGrade(event: { target: { value: string; }; }) {
        grade = parseInt(event.target.value);
      }

      function updateClassNum(event: { target: { value: string; }; }) {
        classNum = parseInt(event.target.value);
      }

      async function fetchTimetable() {
        try {
          const response = await fetch(`/api/timeline?grade=${grade}&classNum=${classNum}`);
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          const data = await response.json();
          const timetableElement = document.querySelector('#timetable tbody');
          if (timetableElement) {
            timetableElement.innerHTML = '';
            for (const [day, timetable] of Object.entries(data)) {
              const row = document.createElement('tr');
              const dayCell = document.createElement('td');
              dayCell.className = 'border p-2';
              dayCell.textContent = day;
              const timetableCell = document.createElement('td');
              timetableCell.className = 'border p-2';
              timetableCell.textContent = (timetable as { subject: string }[]).map((item) => item.subject).join(', ');
              row.appendChild(dayCell);
              row.appendChild(timetableCell);
              timetableElement.appendChild(row);
            }
          }
        } catch (error) {
          console.error('Error fetching timetable:', error);
        }
      }

      if (gradeElement) {
        // @ts-ignore
        gradeElement.addEventListener('input', updateGrade);
      }
      if (classNumElement) {
        // @ts-ignore
        classNumElement.addEventListener('input', updateClassNum);
      }
      if (fetchButtonElement) {
        fetchButtonElement.addEventListener('click', fetchTimetable);
      }
    });
  </script>
</Layout>
